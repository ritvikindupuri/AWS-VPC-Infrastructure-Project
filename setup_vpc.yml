#This file is the Infrastructure as Code (IaC) blueprint for my project. Instead of clicking through the AWS console, you can deploy this entire two-tier architecture with a single command. This is how modern cloud environments are managed professionally.

This template creates the VPC, subnets, route tables, security groups, and the EC2 instances. It even installs a simple web server on the public instance for the curl

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Deploys a two-tier VPC architecture with a public and private subnet,
  and deploys an EC2 instance into each.

Parameters:
  MyIP:
    Type: String
    Description: Your personal IP address for SSH access to the public EC2 instance.
    Default: 0.0.0.0/0

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet

  # Routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow SSH from MyIP and HTTP/HTTPS from anywhere'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow traffic only from the PublicSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1 # Allow all protocols
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref PublicSecurityGroup

  # EC2 Instances
  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      ImageId: 'ami-0c55b159cbfafe1f0' # Amazon Linux 2023 AMI in us-east-1, update if in another region
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from Public Instance</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicInstance

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      ImageId: 'ami-0c55b159cbfafe1f0' # Amazon Linux 2023 AMI in us-east-1, update if in another region
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateInstance

Outputs:
  PublicInstanceIP:
    Description: 'Public IP address of the Public EC2 instance'
    Value: !GetAtt PublicInstance.PublicIp
  PrivateInstanceIP:
    Description: 'Private IP address of the Private EC2 instance'
    Value: !GetAtt PrivateInstance.PrivateIp
